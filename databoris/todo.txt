
- windows service; host main repository





== launcher kernel

 - script bootstrapping 
 - serialization
 - configuration, eg read settings from somehwhere (exe-name.lua file?)
 - networking (socket client)
 - client-server protocol 	
 - error messages (messagebox, popups)
 - command line parsing
 - 
 - caching, eg libgit for storage



=== configuration

 - ini file?
 - config items
 	- known databases
 		home=beast:5060
 	- network params
 		socket,timeouts,dns
 	- logging
 		logdir/name
 	- update details?
 	
=== networking

 - server
 	- socket select
 	- coroutine for handles
 	- libuv for fast network stack
 - messaging
 	- equivalent of rabbitmq, zeromq
 	- may be able to use 0mq directly as a library?
 
=== client server procotol

 - send:
 - magic byte
 	- version byte
 	- command name (string)
 	- command args (table)
 - receive
 	- magic byte
 	- version byte
 	- table
      - return code
 	  - error
 	  - result (any)		
 - exceptions/errors?
 	
=== caching?
	
 - can this code be on the server?

=== deployment

- can we use the name of the executable as a lookup into a script/config
  on the sourcedb. 
  
=== runtime

- need a management system for DLLs. ideally we want to be able to stream
  in the DLL from the source server based on our bootstrap requirements
- can we store DLLs as hashes? 
- might be easier just to version number them and record their dependencies
- eg build a manifest for the DLL (ala ivy modules)
- hook the LoadLibrary function to plug in the right DLL based on our manifest
- might want a built in way to clean up stale/old files


 %TEMP%/space for application - how to organize...
 
- may need a central/app specific cache of blobs under %TEMP%
- this can be a form of system update 

=== UI

 - UI widgets are different views/editors of tables
 	 - containers are resursive holders of other widgets
 	 - layouts?
  - compound layouts, eg higher level desc of widget tree
  - can we just embed chromium?
  		- and then embed the text,table editors as plugins?
  - convert from css,html,javascript to internal format?
  - transcoding from javascript to lua as a way to implement a fast browser?
 
=== Library plugins

	- chromium
	- vlc library (embed videos)
	- git (sourcedb, bootstrap)
	- wifi/bluetooth 
	- scintilla? editor
	- ngx/openresty for fast web server
	- redis, tokyo cabinet for data (and subdbs)
 
=== IDE structure

	package.loaders = { 
		buffer_loader, 
		res_loader,
		database_loader,
	}, 
	source_cache = {
		["lib.bootstrap.database"] = {
			db = "res",
		},
		["lib.bootstrap.common"] = {
			db = "res",
		},
		["lib.bootstrap.common"] = {
			db = "res",
		},
	}
	object_cache = {}	
	buffers = {
		["lib.bootstrap.database"] = {
			modified = false,
			editor   = {...}
		}
	},
	project = { subdb },
	console = {
		buffer,
		vars = {}
	}
	
=== Code Annotations

  - use comments to store tables of annotation data
  - on push/save we parse file and execute annotations to gen meta
  - can use for runtime type checking in debug/trace mode
  
--< types{ a=int(), b=str() }
--< returns{ str(), null() }
local function test(a, b)
end 

local function test(string a, string b)
end

	
=== Console Functions

sourcedb, 
launches
	- view state 
debugger
	- set breakpoint, 

- buffers() : list open editors
- edit("lib.bootstrap.common") : open source for editing
- save(buffers.current)
- delete(buffer)
- print(meta(buffer))
- eval(buffer)



=== structure

- think about using subclassing (wndprocs) chaining to implement styling, keyhandling
- side-by-side editor windows, LHS = editor/buffer, RHS = output
- ui components handle streams/events
- editor is stream of editing events
- console display stream of text (obviously; but subset of edit events
- table is stream of table mutation events



 